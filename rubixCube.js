/* jslint esversion:6 */

/* 
	0 B 0 0
	L U R D
	0 F 0 0
*/

function faces(n) {
	var i = (n-1)/2;
	return {
		B: { 
			I:i, J:i+n, O: 'F',
			W: { i0: n, j0: n-1, dI: 0, dJ: -1 },
			N: { i0: n, j0: n*4-1, dI: 0, dJ: -1 },
			E: { i0: n, j0: n*3-2, dI: 0, dJ: -1 },
			S: { i0: n, j0: n*2-1, dI: 0, dJ: -1 }
		},
		L: {
			I:i+n, J:i, O: 'R',
			W: { i0: n*2-1, j0: n*4-1, dI: -1, dJ: 0},
			N: { i0: 0, j0: n, dI: 1, dJ: 0},
			E: { i0: n, j0: n, dI: 1, dJ: 0},
			S: { i0: n*2, j0: n, dI: 1, dJ: 0}
		},
		U: {
			I:i+n, J:i+n, O: 'D',
			W: { i0: n*2-1, j0: n-1, dI: -1, dJ: 0},
			N: { i0: n-1, j0: n, dI: 0, dJ: 1},
			E: { i0: n, j0: n*2, dI: 1, dJ: 0},
			S: { i0: n*2, j0: n*2-1, dI: 0, dJ: -1}
		},
		R: {
			I:i+n, J:i+2*n, O: 'L',
			W: { i0: 5, j0: 5, dI: -1, dJ: 0},
			N: { i0: 2, j0: 5, dI: -1, dJ: 0},
			E: { i0: 3, j0: 9, dI: 1, dJ: 0},
			S: { i0: 8, j0: 5, dI: -1, dJ: 0}
		},
		D: {
			I:i+n, J:i+3*n, O: 'U',
			W: { i0: 5, j0: 8, dI: -1, dJ: 0},
			N: { i0: 0, j0: 5, dI: 0, dJ: -1},
			E: { i0: 3, j0: 0, dI: 1, dJ: 0},
			S: { i0: 8, j0: 3, dI: 0, dJ: 1}
		},
		F: {
			I:i+2*n, J:i+n, O: 'B',
			W: { i0: 5, j0: 0, dI: 0, dJ: 1},
			N: { i0: 5, j0: 3, dI: 0, dJ: 1},
			E: { i0: 5, j0: 6, dI: 0, dJ: 1},
			S: { i0: 5, j0: 9, dI: 0, dJ: 1}
		}
	};
}


function copy(A, B){
	for(var i=0; i<A.length; i++){
		B[i] = [];
		for(var j=0; j<A[i].length; j++){
			B[i][j] = A[i][j];
		}
	}
}

function limit(input, l){
	var out = input;
	out = input < 0 ? (l+1)-input : input;
	out = out > l ? out - l : out;
	return out;
}

function rubixCube(cube, commands) {
	n = cube.length / 3;

	var cs = commands.split(" ");
	for (var m=0; m<cs.length; m++){
		// parse command
		var c = cs[m];
		var face = faces[c[0]], ccw = false, layer = 0;
		if(c[1] === "i"){ ccw = true; }
		x = c.slice(-1);
		if(c.length>1 && x !== "i"){
			layer = +x;
			if(layer+1 === n){
				face = faces[face.O]; ccw = !ccw; layer = 0;
			}
		}
		// copy cube
		var ccopy = [[]];
		copy(cube, ccopy);

		// act on face
		var a, b, ahat, bhat, i, j, k, l, I, J;
		if (layer===0 || layer+1===n){
			// rotate face
			I = face.I; J = face.J;
			for (i = I-1; i <= I+1; i++){
				for (j = J-1; j <= J+1; j++){
					a = i; b = j;
					if(!ccw && layer!==n){ ahat = I-(J-j); bhat = J+(I-i); } else { ahat = I+(J-j); bhat = J-(I-i); }
					ccopy[ahat][bhat] = cube[a][b];
				}
			}
		}

		// act on borders
		// clockwise, copy W border to N border
		var dirs = { 'W': 'N', 'N': 'E', 'E': 'S', 'S': 'W'}, s, d;
		if (ccw){ dirs = { 'N': 'W', 'E': 'N', 'S': 'E', 'W': 'S' }; }
		var dI, dJ;
		for (s in dirs){
			d = dirs[s];
			dI = face[s].dI;
			dJ = face[s].dJ;
			i = face[s].i0 - layer*dJ;
			j = face[s].j0 + layer*dI;
			k = face[d].i0 - layer*face[d].dJ;
			l = face[d].j0 + layer*face[d].dI;
			I = i + dI*(n);
			J = j + dJ*(n);

			for(; (dI === 0 || i !== I) && (dJ === 0 || j !== J); ){
				a = limit(i, 8);
				b = limit(j, 11);
				ahat = limit(k, 8);
				bhat = limit(l, 11);
				ccopy[ahat][bhat] = cube[a][b];
				i += dI; j += dJ; k += face[d].dI; l += face[d].dJ;
			}
		}

		cube = ccopy;
	}
	return cube;
}

/* 
	n=3, B means rotate around cube [1][4], U around [4][4], L [4][1], R [4][7], D [4][10], F [7][4]
		U:
		[3][3],[3][4],[3][5]
		[4][3],[4][4],[4][5]
		[5][3],[5][4],[5][5]
		U ->
		[3][3] -> [3][5]  [n-1][n-1] -> [n-1][n+1]
		[3][4] -> [4][5]  [n-1] [n]  ->  [n] [n+1]
		[3][5] -> [5][5]  [n-1][n+1] -> [n+1][n+1]  CCW: [n+1][n+1] -> [n-1][n+1]  [I+1] 
		[4][5] -> [5][4]   [n] [n+1] -> [n+1] [n]   CCW: [n+1][n]   ->  [n][n+1]
		[5][5] -> [5][3]  [n+1][n+1] -> [n+1][n-1]  CCW: [n+1][n-1] ->  [n+1][n+1]
		[5][4] -> [4][3]  [n+1] [n]  ->  [n] [n-1]
		[5][3] -> [3][3]  [n+1][n-1] -> [n-1][n-1]
		[4][3] -> [3][4]   [n] [n-1] -> [n-1] [n]
										   [n]  [n]  ->  [n]  [n]
		I=4,J=4
		[i][j] -> [a][b]
			if (j==-1) b=11; if(i==-1) a=8;
			if (j==12) b=0; if (i==9) a=0;
		CW: all pairs of n-1, n, and n+1, copy [a][b] to [b][a^] 
			a = I-1, a^ = I+1: I+(I-a)
			a = I+1, a^ = I-1: I+(I-a)
		CCW: [a][b] to [b^][a], b^ = (J+(J-b))
cube = [
	[0,0,0,6,6,6,0,0,0,0,0,0], // 0
	[0,0,0,6,6,6,0,0,0,0,0,0], // 1
	[0,0,0,6,6,6,0,0,0,0,0,0], // 2
	[5,5,5,1,1,1,2,2,2,3,3,3], // 3
	[5,5,5,1,1,1,2,2,2,3,3,3], // 4
	[5,5,5,1,1,1,2,2,2,3,3,3], // 5
	[0,0,0,4,4,4,0,0,0,0,0,0], // 6
	[0,0,0,4,4,4,0,0,0,0,0,0], // 7
	[0,0,0,4,4,4,0,0,0,0,0,0]  //8
];
		R:
		[3][6],[3][7],[3][8]
		[4][6],[4][7],[4][8]
		[5][6],[5][7],[5][8]
		R:
		[3][6] -> [3][8]		[I-1][J-1] -> [I-1][J+1]
		[3][7] -> [4][8]		[I-1] [J]  ->  [I] [J+1]
		[3][8] -> [5][8]		[I-1][J+1] -> [I+1][J+1]
		[4][6] -> [3][7]		 [I] [J-1] -> [I-1] [J]
		[4][7] -> [4][7]		 [I]  [J]  ->  [I]  [J]
		[4][8] -> [5][7]		 [I] [J+1] -> [I+1] [J]
		[5][6] -> [3][6]		[I+1][J-1] -> [I-1][J-1]
		[5][7] -> [4][6]		[I+1] [J]  ->  [I] [J-1]
		[5][8] -> [5][6]		[I+1][J+1] -> [I+1][J-1]

*/

/*
		U means [3][2],[4][2],[5][2] -> [2][3],[2][4],[2][5] -> [3][6],[4][6],[5][6] -> [6][3],[6][4],[6][5] -^
						[3][2]->[2][5],[4][2]->[2][4],[5][2]->[2][3]
						[I-1][I-2]->[I-2][I+1],[I][I-2]->[I-2][I],[I+1][I-2]->[I-2][I-1]
		B means [3][0],[3][1],[3][2] -> [3][9],[3][10],[3][11] -> [3][6],[3][7],[3][8] -> [3][3],[3][4],[3][5] -^
		L means [0][3],[1][3],[2][3] -> [3][3],[4][3],[5][3] -> [6][3],[7][3],[8][3] -> [3][11],[4][11],[5][11] -^
		R means [3][5],[4][5],[5][5] -> [0][5],[1][5],[2][5] -> [3][9],[4][9],[5][9] -> [6][5],[7][5],[8][5] -^
						[I-1][J-2]->[I-4][J-2] , [I][J-2]->[I-3][J-2]
		D means [3][9],[4][9],[5][9] -> [0][3],[0][4],[0][5] -> [3][0],[4][0],[5][0] -> [8][3],[8][4],[8][5] -^
		F means [5][0],[5][1],[5][2] -> [5][3],[5][4],[5][5] -> [5][6],[5][7],[5][8] -> [5][9],[5][10],[5[11]]
						[I-2][J-4]->[I-2][J-1] , [I-2][J-3]->[I-1][J] , [I-2][J-2]->[I-2][J+1]
L: I+-1,J-2->I+-1,J+2; I-2,J+-1->I+-1,J+2; 
U: I+-1,J-2->I-2,J+-1; I-2,J+-1->I+-1,J+2; I+-1,J+2->I+2,J+-1; I+2,J+-1->I+-1,J-2

	n = 4, B is [1.5],[5.5], L is [5.5],[1.5], U is [5.5][5.5], R is [5.5][9.5], D is [5.5][13.5], F is [9.5][5.5] 
		U:
		[4][4],[4][5],[4][6],[4][7]
		[5][4],[5][5],[5][6],[5][7]
		[6][4],[6][5],[6][6],[6][7]
		[7][4],[7][5],[7][6],[7][7]
		U -> (f is floor, c is ceiling)
		[4][4] -> [4][7]  [fI-1][fI-1] -> [fI-1][cI+1]  [a][b] -> [b][a^], a=f(5.5)-1=4  a^=c(5.5)+1=7  I+(I-a)
		[4][8] -> [8][7]  [fI-1][cI+2] -> [cI+2][cI+1]
		U1 -> [2][7] -> [7][9]  [fI-3][cJ+1] -> [cJ+1][cI+3]  L is 1
			n=4 fI-1 to cI+1

*/

var cube;
cube = [
	[0,0,0,6,6,6,0,0,0,0,0,0], // 0
	[0,0,0,6,6,6,0,0,0,0,0,0], // 1
	[0,0,0,6,6,6,0,0,0,0,0,0], // 2
	[5,5,5,1,1,1,2,2,2,3,3,3], // 3
	[5,5,5,1,1,1,2,2,2,3,3,3], // 4
	[5,5,5,1,1,1,2,2,2,3,3,3], // 5
	[0,0,0,4,4,4,0,0,0,0,0,0], // 6
	[0,0,0,4,4,4,0,0,0,0,0,0], // 7
	[0,0,0,4,4,4,0,0,0,0,0,0]  //8
];
command = "U0";
console.log(command);
// console.log(rubixCube(cube, command));
/* [
 [0,0,0,6,6,6,0,0,0,0,0,0], 
 [0,0,0,6,6,6,0,0,0,0,0,0], 
 [0,0,0,5,5,5,0,0,0,0,0,0], 
 [5,5,4,1,1,1,6,2,2,3,3,3], 
 [5,5,4,1,1,1,6,2,2,3,3,3], 
 [5,5,4,1,1,1,6,2,2,3,3,3], 
 [0,0,0,2,2,2,0,0,0,0,0,0], 
 [0,0,0,4,4,4,0,0,0,0,0,0], 
 [0,0,0,4,4,4,0,0,0,0,0,0]
] */

cube = [
	[0,0,0,6,6,6,0,0,0,0,0,0],
	[0,0,0,6,6,6,0,0,0,0,0,0],
	[0,0,0,6,6,6,0,0,0,0,0,0],
	[5,5,5,1,1,1,2,2,2,3,3,3],
	[5,5,5,1,1,1,2,2,2,3,3,3],
	[5,5,5,1,1,1,2,2,2,3,3,3],
	[0,0,0,4,4,4,0,0,0,0,0,0],
	[0,0,0,4,4,4,0,0,0,0,0,0],
	[0,0,0,4,4,4,0,0,0,0,0,0]
];
command = "R0 F1";
console.log(command);
// console.log(rubixCube(cube, command));
/* [
 [0,0,0,6,6,1,0,0,0,0,0,0], 
 [0,0,0,6,6,1,0,0,0,0,0,0], 
 [0,0,0,6,6,1,0,0,0,0,0,0], 
 [5,5,5,1,1,4,2,2,2,6,3,3], 
 [6,3,3,5,5,5,1,1,4,2,2,2], 
 [5,5,5,1,1,4,2,2,2,6,3,3], 
 [0,0,0,4,4,3,0,0,0,0,0,0], 
 [0,0,0,4,4,3,0,0,0,0,0,0], 
 [0,0,0,4,4,3,0,0,0,0,0,0]
] */


cube = [
	[0,0,0,6,6,6,0,0,0,0,0,0],
	[0,0,0,6,6,6,0,0,0,0,0,0],
	[0,0,0,6,2,6,0,0,0,0,0,0],
	[5,5,5,1,1,1,2,2,2,3,3,3],
	[5,5,5,1,1,1,6,2,2,3,3,3],
	[5,5,5,1,1,1,2,2,2,3,3,3],
	[0,0,0,4,4,4,0,0,0,0,0,0],
	[0,0,0,4,4,4,0,0,0,0,0,0],
	[0,0,0,4,4,4,0,0,0,0,0,0]
];
/*
[[0,0,0,6,6,6,0,0,0,0,0,0], 
 [0,0,0,6,6,2,0,0,0,0,0,0], 
 [0,0,0,6,6,6,0,0,0,0,0,0], 
 [3,3,3,5,5,5,1,1,1,2,2,2], 
 [5,5,5,1,1,1,6,2,2,3,3,3], 
 [5,5,5,1,1,1,2,2,2,3,3,3], 
 [0,0,0,4,4,4,0,0,0,0,0,0], 
 [0,0,0,4,4,4,0,0,0,0,0,0], 
 [0,0,0,4,4,4,0,0,0,0,0,0]]
*/
command = "F2";
console.log(command);
console.log(rubixCube(cube, command));

cube = [
	[0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0], // 0
	[0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0], // 1
	[0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0], // 2
	[0,0,0,0,6,6,6,6,0,0,0,0,0,0,0,0], // 3
	[5,5,5,5,1,1,1,1,2,2,2,2,3,3,3,3], // 4
	[5,5,5,5,1,1,1,1,2,2,2,2,3,3,3,3], // 5
	[5,5,5,5,1,1,1,1,2,2,2,2,3,3,3,3], // 6
	[5,5,5,5,1,1,1,1,2,2,2,2,3,3,3,3], // 7
	[0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0], // 8
	[0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0], // 9
	[0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0], //10
	[0,0,0,0,4,4,4,4,0,0,0,0,0,0,0,0]  //11
];
// console.log(rubixCube(cube, "Ri0 Li0 Fi0 Bi0 Ui0 Di0"));
/* [[0,0,0,0,0,4,5,5,5,4,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,6,6,6,6,6,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,4,2,2,2,4,0,0,0,0,0,0,0,0,0,0], 
 [3,3,3,3,1,5,6,6,6,2,1,1,1,1,3,2,6,6,6,5], 
 [3,5,5,5,1,5,1,1,1,2,1,2,2,2,3,2,3,3,3,5], 
 [3,5,5,5,1,5,1,1,1,2,1,2,2,2,3,2,3,3,3,5], 
 [3,5,5,5,1,5,1,1,1,2,1,2,2,2,3,2,3,3,3,5], 
 [3,1,1,1,1,5,4,4,4,2,1,3,3,3,3,2,4,4,4,5], 
 [0,0,0,0,0,6,5,5,5,6,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,4,4,4,4,4,0,0,0,0,0,0,0,0,0,0], 
 [0,0,0,0,0,6,2,2,2,6,0,0,0,0,0,0,0,0,0,0]]
*/

