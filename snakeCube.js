/* jslint esversion:6 */
/* https://codefights.com/challenge/93CBnFa2vWyivpdHE */

function snakeCube(board, commands){
/*
	0 B 0 0
	L U R D
	0 F 0 0
*/
	var abs = Math.abs, fl = Math.floor;
	var has = (n, l) => {
		for (var i = 0; i < l.length; i++){
			if(n[0] === l[i][0] && n[1] === l[i][1]){
				return true;
			}
		}
		return false;
	};
	var ished = (p) => {
		return heds.indexOf(board[p[0]][p[1]]) !== -1;
	};
	var C = {
		length : board.length/3,
		sides : {
			/* 0,1 - major coordinates
			 * 2,3,4,5 - W N E S neighbors
			 */
			B : "01LDRU",
			L : "10DBUF",
			U : "11LBRF", 
			R : "12UBDF",
			D : "13RBLF",
			F : "21LURD",
		},
		/* map major coordinate changes to coefficients */
		maps: {
			"0110": [1, 0, -1],
			"0112": [1, 3, 1],
			"1001": [0, 1, 1],
			"1021": [3, 1, -1],
			"1201": [3, 2, -1],
			"1221": [0, 2, 1],
			"2110": [2, 3, 1],
			"2112": [2, 0, -1],
		},
		coeff: [[0, 0, 1], [1, 0, 0], [2, 1, 0], [3, 1, -1]],
		neighbor: (p, D) => {
			/* given i, j, D(irection), return coordinates of neighbor in that direction */
			/* I,J are major coordinates (face position) */
			var b = board;
			var i = p[0], j = p[1];
			var I = fl(i/C.length), J = fl(j/C.length), dI, dJ, k, l, S, N, n, r = [-1, -1];
			/* are we on a side border */
			var EW, NS;
			if (i % C.length === 0){ NS = 'N'; } if ((i+1) % C.length === 0){ NS = 'S'; }
			if (j % C.length === 0){ EW = 'W'; } if ((j+1) % C.length === 0){ EW = 'E'; }
			/* mod i,j, also set index into neighbor face */
			k = i; l = j;
			// if(i===3 && j===7 && D==="N"){debugger;}
			switch(D){
				case 'W': n = 2; l--; break;
				case 'N': n = 3; k--; break;
				case 'E': n = 4; l++; break;
				case 'S': n = 5; k++; break;
				default: return r;
			}
			/* if not wrapping around a side, just +-1 */
			if (!(NS === D || EW === D)){ return [k, l]; }
			if ((!EW && !NS) || (I===1 && J===1)){ return [k, l]; }
			/* which side are we currently on? */
			for (var s in C.sides){ if (+C.sides[s][0] === I && +C.sides[s][1] === J){ S = C.sides[s]; break; }}
			if (!S){ console.log('No side'); return r; }
			/* get neighbor in direction */
			N = C.sides[S[n]];
			if (!N){ console.log('No neighbor'); return r; }
			/* get major coordinates of neighbor */
			K = N[0]; L = N[1];
			dI = K - I; dJ = L - J;
			/* if we have changed I and J, then rotate on border */
			r = [k, l];
			if (I === 0 && NS === 'S' && !EW){ return r; }
			if (I === 2 && NS === 'N' && !EW){ return r; }
			// if (J !== 3 && EW === 'E' && !NS){ return r; }
			// if (J !== 0 && EW === 'W' && !NS){ return r; }
			if(abs(dI)===1 && abs(dJ)===1 && J !== 3){
				var multipliers = C.maps['' + I + J + K + L];
				var coI = C.coeff[multipliers[0]];
				var coJ = C.coeff[multipliers[1]];
				r[0] = coI[0]*C.length + coI[1]*-1 + coI[2]*j;
				r[1] = coJ[0]*C.length + coJ[1]*-1 + coJ[2]*i;
				r[2] = multipliers[2];
			}
			if(abs(dJ)===2){
				if(NS){
					if(s === 'D'){ 
						r[0] = NS==='N'?0:3*C.length-1; r[1] = (C.length-1) + (4*C.length-j);
						// 11->3, 10->4, 9->5
					} else {
						r[0] = NS==='N'?C.length:2*C.length-1; r[1] = 4*C.length-(j-(C.length-1));
					}
				}
				r[2] = 2;
			}
			if(abs(dJ)===3){
				if(EW === 'E'){ r[1] = 0; }
				if(EW === 'W'){ r[1] = 4*C.length-1; }
			}
			return r;
		},
		tail: (p, snek) => {
			var b, d, n = 0, nek=false, hed=ished(p);
			for(var s in dirs){
				d = dirs[s];
				b = C.neighbor(p, d);
				// if(p[0] === 8 && p[1] === 3){debugger;}
				// if(p[0] === 5 && p[1] === 11){debugger;}
				if(board[b[0]][b[1]] === "*"){
					n++;
					if(!has(b, snek.tel)){
						snek.tel.push(b);
						if(!hed){ snek.nd = b; }
						C.tail(b, snek);
					}
				}
				// if(ished(b)){ nek = true; }
			}
			// if(!hed && !nek && n < 2){
			// 	snek.nd = p;
			// }
		}
	};
	var snek = {
		/* head character */
		hed : ">",
		/* coordinate pair having head */
		hij : [0, 0],
		/* array of coordinate pairs having tail */
		tel : [],
		/* i, j of tail end */
		nd : [-1, -1],
	};
	var dirs = "NESW";
	var heds = "^>v<";
	var c, co, lc, i, j, p, chara, h;
	// var imax = board.length, jmax = board[0].length;
	for(c in commands){
		/* read board state */
		// debugger;
		co = commands[c];
		if(co !== "F" &&  co === lc){ continue; }
		lc = co;
		snek.tel = [];
		for(i in board){
			for(j in board[i]){
				chara = board[i][j];
				h = heds.indexOf(chara);
				if (h !== -1){
					snek.hed = heds[h];
					snek.hij = [+i, +j];
					/* find all tail segments */
					C.tail(snek.hij, snek);
					break;
				}
			}
		}
		var dir = dirs[heds.indexOf(snek.hed)], n, nu;
		switch(co){
			case "F":
				nu = heds.indexOf(snek.hed);
				n = C.neighbor(snek.hij, dir);
				break;
			case "L":
				nu = heds.indexOf(snek.hed) - 1; if(nu===-1){ nu = heds.length - 1; }
				dir = dirs[nu];
				break;
			case "R":
				nu = (heds.indexOf(snek.hed) + 1) % 4;
				dir = dirs[nu];
				break;
		}
		/* don't let snek hed point back toward body */
		if(co !== "F"){
			var newdir = dirs[nu];
			n = C.neighbor(snek.hij, newdir);
			if(board[n[0]][n[1]] === "*"){ continue; }
			snek.hed = heds[nu];
		}

		board[snek.hij[0]][snek.hij[1]] = snek.hed;
		if(co === "F"){
			n = C.neighbor(snek.hij, dir);
			// if(n[0]===1 && n[1]===5){debugger;}
			if(n.length > 2){
				/* need to deal with head rotation at borders */
				nu = (heds.indexOf(snek.hed) + n[2]) % 4;
				if (nu === -1){ nu = heds.length - 1; }
				snek.hed = heds[nu];
			}
			switch(board[n[0]][n[1]]){
				case "_":
					board[n[0]][n[1]] = snek.hed;
					board[snek.hij[0]][snek.hij[1]] = "*";
					board[snek.nd[0]][snek.nd[1]] = "_";
					break;
				case "o":
					board[n[0]][n[1]] = snek.hed;
					board[snek.hij[0]][snek.hij[1]] = "*";
					break;
				case "*":
					board[snek.hij[0]][snek.hij[1]] = "x";
					for(var x = 0; x < snek.tel.length; x++){
						var tt = snek.tel[x];
						board[tt[0]][tt[1]] = "x";
					}
					return board;
			}
		}
		// var debug = true;
		var debug = false;
		if(debug){
			for (var q in board){
				console.log(JSON.stringify(board[q]));
			}
			console.log(co);
			debugger;
		}
	}
	return board;
}

var board, commands;

board = [
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 ["_","_","*","*",">","_","o","_","_","_","_","_"], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
];
commands = "FFFF";
// console.log(snakeCube(board, commands));
/*
[[" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 ["_","_","_","_","_","*","*","*",">","_","_","_"], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "]]
*/

board = [
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","o","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 ["_","_","*","*",">","_","o","_","_","_","_","_"], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "]
];
commands = "LFFFFFF";
// console.log(snakeCube(board, commands));
/*
[[" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","_","_","_","*","_"], 
 ["_","_","_","_","_","_","o","_","_","_","v","_"], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "]]
*/

board = [
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","o","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 ["_","_","*","*",">","_","o","_","_","_","_","*"], 
 ["_","_","*","_","_","_","_","_","_","_","_","*"], 
 [" "," "," ","*","_","_"," "," "," "," "," "," "], 
 [" "," "," ","*","_","_"," "," "," "," "," "," "], 
 [" "," "," ","*","_","_"," "," "," "," "," "," "]
];
commands = "LRLFFRFFFFFFFFFFFFFFFFF";
// console.log(snakeCube(board, commands));
/*
[[" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","o","_"," "," "," "," "," "," "], 
 [" "," "," ","*","*","*"," "," "," "," "," "," "], 
 ["_","_","*","_","_","_","*","_","_","_","_","_"], 
 ["_","_","*","_","_","_","*","_","_","_","_","_"], 
 ["_","_","*","_","_","_","*","_","_","_","_","_"], 
 [" "," "," ","_","_","<"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "]]
*/

board = [
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","o","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 ["<","_","_","_","_","_","o","_","_","_","_","_"], 
 ["*","_","_","_","_","_","_","_","_","_","_","_"], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","*","*","_"," "," "," "," "," "," "]
];
commands = "FRFFRFLFFRFFFFRFFFFFFFRFFFFFFFFFFFFRFFF";
// console.log(snakeCube(board, commands));
/*
[[" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","_","*","*"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 ["_","_","_","_","_","_","_","*","_","_","*","_"], 
 ["_","_","_","_","_","_","o","*","_","_","v","_"], 
 ["_","_","_","_","_","_","_","_","_","_","_","_"], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","_","_"," "," "," "," "," "," "]]
*/

board = [[" "," "," ","*","*","*"," "," "," "," "," "," "], 
 [" "," "," ","*","o","*"," "," "," "," "," "," "], 
 [" "," "," ","_","*","*"," "," "," "," "," "," "], 
 ["_","*","_","_","*","_","_","_","_","_","_","_"], 
 ["<","_","_","_","*","_","o","_","_","_","_","_"], 
 ["*","_","_","_","*","_","_","_","_","_","_","_"], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","*","*","_"," "," "," "," "," "," "]];
 commands = "LLLFFFFFFF";
// console.log(snakeCube(board, commands));
/*
[[" "," "," ","_","_","_"," "," "," "," "," "," "], 
 [" "," "," ","_","o","_"," "," "," "," "," "," "], 
 [" "," "," ","_","*","*"," "," "," "," "," "," "], 
 ["_","_","_","_","*","_","_","_","_","_","_","_"], 
 ["*","_","_","_","*","<","*","*","*","*","*","*"], 
 ["*","_","_","_","*","_","_","_","_","_","_","_"], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","_","*","_"," "," "," "," "," "," "], 
 [" "," "," ","*","*","_"," "," "," "," "," "," "]]
*/

board = [[" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 ["_","o","_","_","_","_","_","_","_","_","o","_","_","_","_","_"], 
 ["_","_","_","_","_","_","_","_","_","_","_","_","_","*","^","_"], 
 ["*","*","*","*","*","*","*","*","*","*","_","*","*","*","_","_"], 
 ["*","_","_","_","_","_","_","_","_","o","_","*","_","_","_","_"], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","o","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","*","*","*","*"," "," "," "," "," "," "," "," "]];
commands = "FLFFFFLFFFRFLFFRF";
console.log(snakeCube(board, commands));
/*
[[" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 ["_","o","_","_","_","_","_","_","_","_","*","*","*","*","*","_"], 
 ["_","_","_","_","_","_","_","_","_","_","*","_","_","*","*","_"], 
 ["*","_","_","_","_","_","_","_","_","_","*","*","*","*","_","_"], 
 ["*","_","_","_","_","_","_","_","_","*","*","*","_","_","_","_"], 
 [" "," "," "," ","_","_","^","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","*","*"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","_","_","_","_"," "," "," "," "," "," "," "," "], 
 [" "," "," "," ","*","*","*","*"," "," "," "," "," "," "," "," "]]
*/
